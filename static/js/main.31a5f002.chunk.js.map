{"version":3,"sources":["components/ButtonPreview/ButtonPreview.js","components/HTMLOutput/HTMLOutput.js","components/CSSOutput/CSSOutput.js","App.js","serviceWorker.js","index.js"],"names":["ButtonPreview","button","className","style","fontFamily","fontSize","fontWeight","textBold","fontStyle","textItalic","color","textColor","paddingLeft","paddingRight","paddingTop","paddingBottom","borderWidth","borderStyle","borderColor","borderTopLeftRadius","borderRadiusTopLeft","borderTopRightRadius","borderRadiusTopRight","borderBottomLeftRadius","borderRadiusBottomLeft","borderBottomRightRadius","borderRadiusBottomRight","backgroundColor","background","textShadow","hasTextShadow","textShadowX","textShadowY","textShadowBlur","textShadowColor","boxShadow","hasBoxShadow","boxShadowX","boxShadowY","boxShadowBlur","boxShadowSize","boxShadowColor","text","HTMLOutput","innerText","codeAreaRef","useRef","textAreaRef","src","title","alt","onClick","e","codeText","current","value","select","document","execCommand","target","focus","classList","remove","ref","defaultValue","CSSOutput","App","useState","tab","setTab","updateButton","buttonSetNewValue","prop","console","log","htmlFor","id","onChange","type","placeholder","min","max","checked","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAuDeA,G,MArDO,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACpB,kBAAC,WAAD,KACE,+CACA,yBAAKC,UAAU,iBACb,4BACEC,MAAO,CACLC,WAAYH,EAAOG,WACnBC,SAAS,GAAD,OAAKJ,EAAOI,SAAZ,MACRC,WAAW,GAAD,OAAKL,EAAOM,SAAW,OAAS,UAC1CC,UAAU,GAAD,OAAKP,EAAOQ,WAAa,SAAW,UAC7CC,MAAM,GAAD,OAAKT,EAAOU,WACjBC,YAAY,GAAD,OAAKX,EAAOW,YAAZ,MACXC,aAAa,GAAD,OAAKZ,EAAOY,aAAZ,MACZC,WAAW,GAAD,OAAKb,EAAOa,WAAZ,MACVC,cAAc,GAAD,OAAKd,EAAOc,cAAZ,MACbC,YAAY,GAAD,OAAKf,EAAOe,YAAZ,MACXC,YAAY,GAAD,OAAKhB,EAAOgB,aACvBC,YAAY,GAAD,OAAKjB,EAAOiB,aACvBC,oBAAoB,GAAD,OAAKlB,EAAOmB,oBAAZ,MACnBC,qBAAqB,GAAD,OAAKpB,EAAOqB,qBAAZ,MACpBC,uBAAuB,GAAD,OAAKtB,EAAOuB,uBAAZ,MACtBC,wBAAwB,GAAD,OAAKxB,EAAOyB,wBAAZ,MACvBC,gBAAgB,GAAD,OAAK1B,EAAO2B,YAC3BC,WAAW,GAAD,OACR5B,EAAO6B,cAAP,8BAEQ7B,EAAO8B,YAFf,iCAGQ9B,EAAO+B,YAHf,iCAIQ/B,EAAOgC,eAJf,iCAKQhC,EAAOiC,gBALf,sBAOI,IAENC,UAAU,GAAD,OACPlC,EAAOmC,aAAP,8BAEQnC,EAAOoC,WAFf,iCAGQpC,EAAOqC,WAHf,iCAIQrC,EAAOsC,cAJf,iCAKQtC,EAAOuC,cALf,iCAMQvC,EAAOwC,eANf,sBAQI,KAGRvC,UAAU,aAETD,EAAOyC,UCLDC,EA1CI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACdC,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MAc3B,OACE,kBAAC,WAAD,KACE,2CACe,IACb,yBACE5C,UAAU,YACV8C,IAAI,mBACJC,MAAM,oBACNC,IAAI,OACJC,QArBR,SAAyBC,GACvB,IAAMC,EAAWR,EAAYS,QAAQV,UACrCG,EAAYO,QAAQC,MAAQF,EAE5BN,EAAYO,QAAQpD,WAAa,UAEjC6C,EAAYO,QAAQE,SACpBC,SAASC,YAAY,QACrBN,EAAEO,OAAOC,QACTb,EAAYO,QAAQO,UAAUC,OAAO,cAenC,0BAAM5D,UAAU,cAAc6D,IAAKlB,GAAnC,IACM,0BAAM3C,UAAU,OAAhB,OAAiC,IACrC,0BAAMA,UAAU,SAAhB,SAFF,IAGE,0BAAMA,UAAU,UAAhB,eAHF,IAIE,6BAJF,mBAK2B0C,EACzB,6BANF,IAOM,0BAAM1C,UAAU,OAAhB,QAPN,KASA,8BAAU6D,IAAKhB,EAAaiB,aAAa,yBCIhCC,EAzCG,WAChB,IAAMpB,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MAc3B,OACE,kBAAC,WAAD,KACE,0CACc,IACZ,yBACE5C,UAAU,YACV8C,IAAI,mBACJC,MAAM,oBACNC,IAAI,OACJC,QArBR,SAAyBC,GACvB,IAAMC,EAAWR,EAAYS,QAAQV,UACrCG,EAAYO,QAAQC,MAAQF,EAE5BN,EAAYO,QAAQpD,WAAa,UAEjC6C,EAAYO,QAAQE,SACpBC,SAASC,YAAY,QACrBN,EAAEO,OAAOC,QACTb,EAAYO,QAAQO,UAAUC,OAAO,cAenC,0BAAM5D,UAAU,aAAa6D,IAAKlB,GAAlC,IACG,0BAAM3C,UAAU,cAAhB,aAA8C,IAC/C,0BAAMA,UAAU,OAAhB,KACA,6BAHF,sBAKE,yBAAKA,UAAU,OACf,0BAAMA,UAAU,OAAhB,MAEF,8BAAU6D,IAAKhB,EAAaiB,aAAa,yB,4NC/B/C,IAqdeE,EArdH,WAAO,IAAD,EACMC,mBAAS,WADf,mBACTC,EADS,KACJC,EADI,OAEeF,mBAAS,CACtCzB,KAAM,WACNtC,WAAY,QACZC,SAAU,GACVE,UAAU,EACVE,YAAY,EACZE,UAAW,UACXC,YAAa,EACbC,aAAc,EACdC,WAAY,GACZC,cAAe,GACfC,YAAa,EACbC,YAAa,QACbC,YAAa,UACbE,oBAAqB,EACrBE,qBAAsB,EACtBE,uBAAwB,EACxBE,wBAAyB,EACzBE,WAAY,cACZE,eAAe,EACfC,YAAa,EACbC,YAAa,EACbC,eAAgB,EAChBC,gBAAiB,UACjBE,cAAc,EACdC,WAAY,EACZC,WAAY,EACZC,cAAe,EACfC,cAAe,EACfC,eAAgB,YA/BF,mBAETxC,EAFS,KAEDqE,EAFC,KAkChB,SAASC,EAAkBhB,EAAOiB,GAChCF,E,qVAAa,CAAD,GACPrE,EADO,eAETuE,EAAOjB,KAEVkB,QAAQC,IAAInB,EAAOiB,EAAMvE,GAG3B,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAS,uBAA0B,aAARkE,EAAqB,SAAW,KAC9D,yBAAKlE,UAAU,WAAWiD,QAAS,kBAAMkB,EAAO,cAAhD,QACQ,IACN,yBACErB,IAAI,yBACJE,IAAI,aACJhD,UAAU,gBAGd,yBAAKA,UAAU,eACb,yBAAKA,UAAU,0BACb,2BAAOyE,QAAQ,QAAf,gBACA,2BACEC,GAAG,OACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,SACjDS,aAAc/D,EAAOyC,KACrBoC,KAAK,OACLC,YAAY,iBAGhB,yBAAK7E,UAAU,2BACb,2BAAOyE,QAAQ,eAAf,gBACA,4BACEC,GAAG,cACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,gBAEjD,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,mBAAd,mBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,kBAAd,oBAGJ,yBAAKrD,UAAU,yBACb,2BAAOyE,QAAQ,YAAf,cACA,2BACEC,GAAG,WACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,aACjDS,aAAc/D,EAAOI,SACrByE,KAAK,SACLC,YAAY,YACZC,IAAI,KACJC,IAAI,SAGR,yBAAK/E,UAAU,0BACb,2BAAOyE,QAAQ,YAAf,SACA,2BACEC,GAAG,WACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOuB,QAAS,aACnDA,QAASjF,EAAOM,SAChBuE,KAAK,aAEP,2BAAOH,QAAQ,YAAf,WACA,2BACEC,GAAG,WACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOuB,QAAS,eAEtCA,QAASjF,EAAOQ,WAChBqE,KAAK,cAGT,yBAAK5E,UAAU,0BACb,2BAAOyE,QAAQ,aAAf,eACA,2BACEC,GAAG,YACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,cACjDS,aAAc/D,EAAOU,UACrBmE,KAAK,WAGT,yBAAK5E,UAAU,+BACb,2BAAOyE,QAAQ,iBAAf,oBACA,2BACEC,GAAG,gBACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOuB,QAAS,kBAEtCA,QAASjF,EAAO6B,cAChBgD,KAAK,cAGR7E,EAAO6B,cACN,yBAAK5B,UAAU,2BACb,6BACE,2BAAOyE,QAAQ,eAAf,MACA,2BACEC,GAAG,cACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,gBAEpCA,MAAOtD,EAAO8B,YACd+C,KAAK,YAGT,6BACE,2BAAOH,QAAQ,eAAf,MACA,2BACEC,GAAG,cACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,gBAEpCA,MAAOtD,EAAO+B,YACd8C,KAAK,YAGT,6BACE,2BAAOH,QAAQ,kBAAf,SACA,2BACEC,GAAG,iBACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,mBAEpCA,MAAOtD,EAAOgC,eACd6C,KAAK,YAGT,6BACE,2BAAOH,QAAQ,mBAAf,UACA,2BACEC,GAAG,kBACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,oBAEpCA,MAAOtD,EAAOiC,gBACd4C,KAAK,YAKX,KAIN,yBACE5E,UAAS,2BACC,iBAARkE,EAAyB,SAAW,KAGtC,yBAAKlE,UAAU,WAAWiD,QAAS,kBAAMkB,EAAO,kBAAhD,YACY,IACV,yBACErB,IAAI,yBACJE,IAAI,aACJhD,UAAU,gBAGd,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eACb,2BAAOyE,QAAQ,eAAf,iBACA,2BACEC,GAAG,cACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,gBACjDA,MAAOtD,EAAOW,YACdkE,KAAK,SACLE,IAAI,IACJC,IAAI,SAGR,yBAAK/E,UAAU,eACb,2BAAOyE,QAAQ,gBAAf,kBACA,2BACEC,GAAG,eACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,iBAEpCA,MAAOtD,EAAOY,aACdiE,KAAK,SACLE,IAAI,IACJC,IAAI,SAGR,yBAAK/E,UAAU,eACb,2BAAOyE,QAAQ,cAAf,gBACA,2BACEC,GAAG,aACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,eACjDA,MAAOtD,EAAOa,WACdgE,KAAK,SACLE,IAAI,IACJC,IAAI,SAGR,yBAAK/E,UAAU,eACb,2BAAOyE,QAAQ,iBAAf,mBACA,2BACEC,GAAG,gBACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,kBAEpCA,MAAOtD,EAAOc,cACd+D,KAAK,SACLE,IAAI,IACJC,IAAI,WAKZ,yBACE/E,UAAS,yBAA4B,eAARkE,EAAuB,SAAW,KAE/D,yBAAKlE,UAAU,WAAWiD,QAAS,kBAAMkB,EAAO,gBAAhD,UACU,IACR,yBACErB,IAAI,yBACJE,IAAI,aACJhD,UAAU,gBAGd,yBAAKA,UAAU,eACb,yBAAKA,UAAU,4BACb,2BAAOyE,QAAQ,WAAf,iBACA,2BACEC,GAAG,UACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,gBACjDA,MAAOtD,EAAOe,YACd8D,KAAK,SACLE,IAAI,IACJC,IAAI,QAGR,yBAAK/E,UAAU,4BACb,2BAAOyE,QAAQ,eAAf,iBACA,4BACEC,GAAG,cACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,iBAEjD,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,YAGJ,yBAAKrD,UAAU,4BACb,2BAAOyE,QAAQ,eAAf,iBACA,2BACEC,GAAG,cACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,gBACjDS,aAAc/D,EAAOiB,YACrB4D,KAAK,WAGT,yBAAK5E,UAAU,eACb,2BAAOyE,QAAQ,WAAf,oBACA,2BACEC,GAAG,UACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,wBAEpCA,MAAOtD,EAAOmB,oBACd0D,KAAK,SACLE,IAAI,IACJC,IAAI,SAGR,yBAAK/E,UAAU,eACb,2BAAOyE,QAAQ,YAAf,qBACA,2BACEC,GAAG,WACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,yBAEpCA,MAAOtD,EAAOqB,qBACdwD,KAAK,SACLE,IAAI,IACJC,IAAI,SAGR,yBAAK/E,UAAU,eACb,2BAAOyE,QAAQ,cAAf,uBACA,2BACEC,GAAG,aACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,2BAEpCA,MAAOtD,EAAOuB,uBACdsD,KAAK,SACLE,IAAI,IACJC,IAAI,SAGR,yBAAK/E,UAAU,eACb,2BAAOyE,QAAQ,eAAf,wBACA,2BACEC,GAAG,cACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,4BAEpCA,MAAOtD,EAAOyB,wBACdoD,KAAK,SACLE,IAAI,IACJC,IAAI,WAKZ,yBACE/E,UAAS,6BACC,mBAARkE,EAA2B,SAAW,KAGxC,yBAAKlE,UAAU,WAAWiD,QAAS,kBAAMkB,EAAO,oBAAhD,cACc,IACZ,yBACErB,IAAI,yBACJE,IAAI,aACJhD,UAAU,gBAGd,yBAAKA,UAAU,eACb,yBAAKA,UAAU,8BACb,2BAAOyE,QAAQ,gBAAf,sBACA,2BACEC,GAAG,eACHrB,MAAOtD,EAAOmC,aACde,QAAS,SAAAC,GAAC,OACRmB,EAAkBnB,EAAEO,OAAOuB,QAAS,iBAEtCJ,KAAK,cAGT,yBAAK5E,UAAU,0BACb,6BACE,2BAAOyE,QAAQ,cAAf,MACA,2BACEC,GAAG,aACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,eAEpCA,MAAOtD,EAAOoC,WACdyC,KAAK,YAGT,6BACE,2BAAOH,QAAQ,cAAf,MACA,2BACEC,GAAG,aACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,eAEpCA,MAAOtD,EAAOqC,WACdwC,KAAK,YAGT,6BACE,2BAAOH,QAAQ,iBAAf,SACA,2BACEC,GAAG,gBACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,kBAEpCA,MAAOtD,EAAOsC,cACduC,KAAK,YAGT,6BACE,2BAAOH,QAAQ,iBAAf,SACA,2BACEC,GAAG,gBACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,kBAEpCA,MAAOtD,EAAOuC,cACdsC,KAAK,YAGT,6BACE,2BAAOH,QAAQ,kBAAf,UACA,2BACEC,GAAG,iBACHC,SAAU,SAAAzB,GAAC,OACTmB,EAAkBnB,EAAEO,OAAOJ,MAAO,mBAEpCA,MAAOtD,EAAOwC,eACdqC,KAAK,cAMf,yBACE5E,UAAS,6BACC,mBAARkE,EAA2B,SAAW,KAGxC,yBAAKlE,UAAU,WAAWiD,QAAS,kBAAMkB,EAAO,oBAAhD,cACc,IACZ,yBACErB,IAAI,yBACJE,IAAI,aACJhD,UAAU,gBAGd,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iCACb,2BAAOyE,QAAQ,mBAAf,qBACA,2BACEC,GAAG,kBACHC,SAAU,SAAAzB,GAAC,OAAImB,EAAkBnB,EAAEO,OAAOJ,MAAO,eACjDS,aAAc/D,EAAO2B,WACrBkD,KAAK,cAMf,yBAAK5E,UAAU,UACb,kBAAC,EAAD,CAAeD,OAAQA,IACvB,kBAAC,EAAD,CAAY2C,UAAW3C,EAAOyC,OAC9B,kBAAC,EAAD,SClcYyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASiC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.31a5f002.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nconst ButtonPreview = ({ button }) => (\r\n  <Fragment>\r\n    <h2>Button Preview:</h2>\r\n    <div className=\"button-window\">\r\n      <button\r\n        style={{\r\n          fontFamily: button.fontFamily,\r\n          fontSize: `${button.fontSize}px`,\r\n          fontWeight: `${button.textBold ? \"bold\" : \"normal\"}`,\r\n          fontStyle: `${button.textItalic ? \"italic\" : \"normal\"}`,\r\n          color: `${button.textColor}`,\r\n          paddingLeft: `${button.paddingLeft}px`,\r\n          paddingRight: `${button.paddingRight}px`,\r\n          paddingTop: `${button.paddingTop}px`,\r\n          paddingBottom: `${button.paddingBottom}px`,\r\n          borderWidth: `${button.borderWidth}px`,\r\n          borderStyle: `${button.borderStyle}`,\r\n          borderColor: `${button.borderColor}`,\r\n          borderTopLeftRadius: `${button.borderRadiusTopLeft}px`,\r\n          borderTopRightRadius: `${button.borderRadiusTopRight}px`,\r\n          borderBottomLeftRadius: `${button.borderRadiusBottomLeft}px`,\r\n          borderBottomRightRadius: `${button.borderRadiusBottomRight}px`,\r\n          backgroundColor: `${button.background}`,\r\n          textShadow: `${\r\n            button.hasTextShadow\r\n              ? `\r\n                  ${button.textShadowX}px\r\n                  ${button.textShadowY}px\r\n                  ${button.textShadowBlur}px\r\n                  ${button.textShadowColor}\r\n                `\r\n              : \"\"\r\n          }`,\r\n          boxShadow: `${\r\n            button.hasBoxShadow\r\n              ? `\r\n                  ${button.boxShadowX}px\r\n                  ${button.boxShadowY}px\r\n                  ${button.boxShadowBlur}px\r\n                  ${button.boxShadowSize}px\r\n                  ${button.boxShadowColor}\r\n                `\r\n              : \"\"\r\n          }`\r\n        }}\r\n        className=\"my-button\"\r\n      >\r\n        {button.text}\r\n      </button>\r\n    </div>\r\n  </Fragment>\r\n);\r\n\r\nexport default ButtonPreview;\r\n","import React, { Fragment, useRef } from \"react\";\r\n\r\nconst HTMLOutput = ({ innerText }) => {\r\n  const codeAreaRef = useRef(null);\r\n  const textAreaRef = useRef(null);\r\n\r\n  function copyToClipboard(e) {\r\n    const codeText = codeAreaRef.current.innerText;\r\n    textAreaRef.current.value = codeText;\r\n\r\n    textAreaRef.current.className += \" active\";\r\n\r\n    textAreaRef.current.select();\r\n    document.execCommand(\"copy\");\r\n    e.target.focus();\r\n    textAreaRef.current.classList.remove(\"active\");\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h3>\r\n        HTML output:{\" \"}\r\n        <img\r\n          className=\"code-copy\"\r\n          src=\"/images/copy.png\"\r\n          title=\"Copy to clipboard\"\r\n          alt=\"copy\"\r\n          onClick={copyToClipboard}\r\n        />\r\n      </h3>\r\n      <code className=\"html-output\" ref={codeAreaRef}>\r\n        &lt;<span className=\"red\">div</span>{\" \"}\r\n        <span className=\"green\">class</span>=\r\n        <span className=\"orange\">\"my-button\"</span>&gt;\r\n        <br />\r\n        &nbsp;&nbsp;&nbsp;&nbsp;{innerText}\r\n        <br />\r\n        &lt;<span className=\"red\">/div</span>&gt;\r\n      </code>\r\n      <textarea ref={textAreaRef} defaultValue=\"Some text to copys\" />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HTMLOutput;\r\n","import React, { Fragment, useRef } from \"react\";\r\n\r\nconst CSSOutput = () => {\r\n  const codeAreaRef = useRef(null);\r\n  const textAreaRef = useRef(null);\r\n\r\n  function copyToClipboard(e) {\r\n    const codeText = codeAreaRef.current.innerText;\r\n    textAreaRef.current.value = codeText;\r\n\r\n    textAreaRef.current.className += \" active\";\r\n\r\n    textAreaRef.current.select();\r\n    document.execCommand(\"copy\");\r\n    e.target.focus();\r\n    textAreaRef.current.classList.remove(\"active\");\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h3>\r\n        CSS output:{\" \"}\r\n        <img\r\n          className=\"code-copy\"\r\n          src=\"/images/copy.png\"\r\n          title=\"Copy to clipboard\"\r\n          alt=\"copy\"\r\n          onClick={copyToClipboard}\r\n        />\r\n      </h3>\r\n      <code className=\"css-output\" ref={codeAreaRef}>\r\n        .<span className=\"span green\">my-button</span>{\" \"}\r\n        <span className=\"red\">&#123;</span>\r\n        <br />\r\n        &nbsp;&nbsp;&nbsp;&nbsp;...\r\n        <div className=\"br\" />\r\n        <span className=\"red\">&#125;</span>\r\n      </code>\r\n      <textarea ref={textAreaRef} defaultValue=\"Some text to copys\" />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CSSOutput;\r\n","import React, { useState } from \"react\";\nimport \"./scss/main.css\";\n\nimport ButtonPreview from \"./components/ButtonPreview/ButtonPreview\";\nimport HTMLOutput from \"./components/HTMLOutput/HTMLOutput\";\nimport CSSOutput from \"./components/CSSOutput/CSSOutput\";\n\nconst App = () => {\n  const [tab, setTab] = useState(\"not set\");\n  const [button, updateButton] = useState({\n    text: \"Click Me\",\n    fontFamily: \"Arial\",\n    fontSize: 20,\n    textBold: false,\n    textItalic: false,\n    textColor: \"#FFFFFF\",\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 15,\n    paddingBottom: 15,\n    borderWidth: 2,\n    borderStyle: \"solid\",\n    borderColor: \"#333333\",\n    borderRadiusTopLeft: 8,\n    borderRadiusTopRight: 8,\n    borderRadiusBottomLeft: 8,\n    borderRadiusBottomRight: 8,\n    background: \"deepskyblue\",\n    hasTextShadow: false,\n    textShadowX: 0,\n    textShadowY: 0,\n    textShadowBlur: 0,\n    textShadowColor: \"#333333\",\n    hasBoxShadow: false,\n    boxShadowX: 2,\n    boxShadowY: 4,\n    boxShadowBlur: 5,\n    boxShadowSize: 1,\n    boxShadowColor: \"#333333\"\n  });\n\n  function buttonSetNewValue(value, prop) {\n    updateButton({\n      ...button,\n      [prop]: value\n    });\n    console.log(value, prop, button);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"input\">\n        <div className={`tab tab-text ${tab === \"tab-text\" ? \"active\" : \"\"}`}>\n          <div className=\"tab-name\" onClick={() => setTab(\"tab-text\")}>\n            Text:{\" \"}\n            <img\n              src=\"/images/arrow-down.png\"\n              alt=\"arrow-down\"\n              className=\"arrow-down\"\n            />\n          </div>\n          <div className=\"tab-content\">\n            <div className=\"input-group text-inner\">\n              <label htmlFor=\"text\">Button Text:</label>\n              <input\n                id=\"text\"\n                onChange={e => buttonSetNewValue(e.target.value, \"text\")}\n                defaultValue={button.text}\n                type=\"text\"\n                placeholder=\"Button Text\"\n              />\n            </div>\n            <div className=\"input-group text-family\">\n              <label htmlFor=\"borderStyle\">Font Family:</label>\n              <select\n                id=\"borderStyle\"\n                onChange={e => buttonSetNewValue(e.target.value, \"fontFamily\")}\n              >\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Verdana\">Verdana</option>\n                <option value=\"Georgia\">Georgia</option>\n                <option value=\"Times New Roman\">Times New Roman</option>\n                <option value=\"Courier New\">Courier New</option>\n                <option value=\"Lucida Console\">Lucida Console</option>\n              </select>\n            </div>\n            <div className=\"input-group text-size\">\n              <label htmlFor=\"textSize\">Font Size:</label>\n              <input\n                id=\"textSize\"\n                onChange={e => buttonSetNewValue(e.target.value, \"fontSize\")}\n                defaultValue={button.fontSize}\n                type=\"number\"\n                placeholder=\"Text Size\"\n                min=\"10\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"input-group text-style\">\n              <label htmlFor=\"textBold\">Bold:</label>\n              <input\n                id=\"textBold\"\n                onChange={e => buttonSetNewValue(e.target.checked, \"textBold\")}\n                checked={button.textBold}\n                type=\"checkbox\"\n              />\n              <label htmlFor=\"textBold\">Italic:</label>\n              <input\n                id=\"textBold\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.checked, \"textItalic\")\n                }\n                checked={button.textItalic}\n                type=\"checkbox\"\n              />\n            </div>\n            <div className=\"input-group text-color\">\n              <label htmlFor=\"textColor\">Text Color:</label>\n              <input\n                id=\"textColor\"\n                onChange={e => buttonSetNewValue(e.target.value, \"textColor\")}\n                defaultValue={button.textColor}\n                type=\"color\"\n              />\n            </div>\n            <div className=\"input-group text-has-shadow\">\n              <label htmlFor=\"hasTextShadow\">Add Text Shadow:</label>\n              <input\n                id=\"hasTextShadow\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.checked, \"hasTextShadow\")\n                }\n                checked={button.hasTextShadow}\n                type=\"checkbox\"\n              />\n            </div>\n            {button.hasTextShadow ? (\n              <div className=\"input-group text-shadow\">\n                <div>\n                  <label htmlFor=\"textShadowX\">X:</label>\n                  <input\n                    id=\"textShadowX\"\n                    onChange={e =>\n                      buttonSetNewValue(e.target.value, \"textShadowX\")\n                    }\n                    value={button.textShadowX}\n                    type=\"number\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"textShadowY\">Y:</label>\n                  <input\n                    id=\"textShadowY\"\n                    onChange={e =>\n                      buttonSetNewValue(e.target.value, \"textShadowY\")\n                    }\n                    value={button.textShadowY}\n                    type=\"number\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"textShadowBlur\">Blur:</label>\n                  <input\n                    id=\"textShadowBlur\"\n                    onChange={e =>\n                      buttonSetNewValue(e.target.value, \"textShadowBlur\")\n                    }\n                    value={button.textShadowBlur}\n                    type=\"number\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"textShadowColor\">Color:</label>\n                  <input\n                    id=\"textShadowColor\"\n                    onChange={e =>\n                      buttonSetNewValue(e.target.value, \"textShadowColor\")\n                    }\n                    value={button.textShadowColor}\n                    type=\"color\"\n                  />\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n        <div\n          className={`tab tab-paddings ${\n            tab === \"tab-paddings\" ? \"active\" : \"\"\n          }`}\n        >\n          <div className=\"tab-name\" onClick={() => setTab(\"tab-paddings\")}>\n            Paddings:{\" \"}\n            <img\n              src=\"/images/arrow-down.png\"\n              alt=\"arrow-down\"\n              className=\"arrow-down\"\n            />\n          </div>\n          <div className=\"tab-content\">\n            <div className=\"input-group\">\n              <label htmlFor=\"paddingLeft\">Left Padding:</label>\n              <input\n                id=\"paddingLeft\"\n                onChange={e => buttonSetNewValue(e.target.value, \"paddingLeft\")}\n                value={button.paddingLeft}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"input-group\">\n              <label htmlFor=\"paddingRight\">Right Padding:</label>\n              <input\n                id=\"paddingRight\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.value, \"paddingRight\")\n                }\n                value={button.paddingRight}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"input-group\">\n              <label htmlFor=\"paddingTop\">Top Padding:</label>\n              <input\n                id=\"paddingTop\"\n                onChange={e => buttonSetNewValue(e.target.value, \"paddingTop\")}\n                value={button.paddingTop}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"input-group\">\n              <label htmlFor=\"paddingBottom\">Bottom Padding:</label>\n              <input\n                id=\"paddingBottom\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.value, \"paddingBottom\")\n                }\n                value={button.paddingBottom}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n          </div>\n        </div>\n        <div\n          className={`tab tab-border ${tab === \"tab-border\" ? \"active\" : \"\"}`}\n        >\n          <div className=\"tab-name\" onClick={() => setTab(\"tab-border\")}>\n            Border:{\" \"}\n            <img\n              src=\"/images/arrow-down.png\"\n              alt=\"arrow-down\"\n              className=\"arrow-down\"\n            />\n          </div>\n          <div className=\"tab-content\">\n            <div className=\"input-group border-width\">\n              <label htmlFor=\"topLeft\">Border Width:</label>\n              <input\n                id=\"topLeft\"\n                onChange={e => buttonSetNewValue(e.target.value, \"borderWidth\")}\n                value={button.borderWidth}\n                type=\"number\"\n                min=\"0\"\n                max=\"20\"\n              />\n            </div>\n            <div className=\"input-group border-style\">\n              <label htmlFor=\"borderStyle\">Border Style:</label>\n              <select\n                id=\"borderStyle\"\n                onChange={e => buttonSetNewValue(e.target.value, \"borderStyle\")}\n              >\n                <option value=\"solid\">Solid</option>\n                <option value=\"dotted\">Dotted</option>\n                <option value=\"dashed\">Dashed</option>\n              </select>\n            </div>\n            <div className=\"input-group border-color\">\n              <label htmlFor=\"borderColor\">Border Color:</label>\n              <input\n                id=\"borderColor\"\n                onChange={e => buttonSetNewValue(e.target.value, \"borderColor\")}\n                defaultValue={button.borderColor}\n                type=\"color\"\n              />\n            </div>\n            <div className=\"input-group\">\n              <label htmlFor=\"topLeft\">Top Left Radius:</label>\n              <input\n                id=\"topLeft\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.value, \"borderRadiusTopLeft\")\n                }\n                value={button.borderRadiusTopLeft}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"input-group\">\n              <label htmlFor=\"topRight\">Top Right Radius:</label>\n              <input\n                id=\"topRight\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.value, \"borderRadiusTopRight\")\n                }\n                value={button.borderRadiusTopRight}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"input-group\">\n              <label htmlFor=\"bottomLeft\">Bottom Left Radius:</label>\n              <input\n                id=\"bottomLeft\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.value, \"borderRadiusBottomLeft\")\n                }\n                value={button.borderRadiusBottomLeft}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"input-group\">\n              <label htmlFor=\"bottomRight\">Bottom Right Radius:</label>\n              <input\n                id=\"bottomRight\"\n                onChange={e =>\n                  buttonSetNewValue(e.target.value, \"borderRadiusBottomRight\")\n                }\n                value={button.borderRadiusBottomRight}\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n          </div>\n        </div>\n        <div\n          className={`tab tab-box-shadow ${\n            tab === \"tab-box-shadow\" ? \"active\" : \"\"\n          }`}\n        >\n          <div className=\"tab-name\" onClick={() => setTab(\"tab-box-shadow\")}>\n            Box Shadow:{\" \"}\n            <img\n              src=\"/images/arrow-down.png\"\n              alt=\"arrow-down\"\n              className=\"arrow-down\"\n            />\n          </div>\n          <div className=\"tab-content\">\n            <div className=\"input-group has-box-shadow\">\n              <label htmlFor=\"hasBoxShadow\">Turn On Box Shadow</label>\n              <input\n                id=\"hasBoxShadow\"\n                value={button.hasBoxShadow}\n                onClick={e =>\n                  buttonSetNewValue(e.target.checked, \"hasBoxShadow\")\n                }\n                type=\"checkbox\"\n              />\n            </div>\n            <div className=\"input-group box-shadow\">\n              <div>\n                <label htmlFor=\"boxShadowX\">X:</label>\n                <input\n                  id=\"boxShadowX\"\n                  onChange={e =>\n                    buttonSetNewValue(e.target.value, \"boxShadowX\")\n                  }\n                  value={button.boxShadowX}\n                  type=\"number\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"boxShadowY\">Y:</label>\n                <input\n                  id=\"boxShadowY\"\n                  onChange={e =>\n                    buttonSetNewValue(e.target.value, \"boxShadowY\")\n                  }\n                  value={button.boxShadowY}\n                  type=\"number\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"boxShadowBlur\">Blur:</label>\n                <input\n                  id=\"boxShadowBlur\"\n                  onChange={e =>\n                    buttonSetNewValue(e.target.value, \"boxShadowBlur\")\n                  }\n                  value={button.boxShadowBlur}\n                  type=\"number\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"boxShadowSize\">Size:</label>\n                <input\n                  id=\"boxShadowSize\"\n                  onChange={e =>\n                    buttonSetNewValue(e.target.value, \"boxShadowSize\")\n                  }\n                  value={button.boxShadowSize}\n                  type=\"number\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"boxShadowColor\">Color:</label>\n                <input\n                  id=\"boxShadowColor\"\n                  onChange={e =>\n                    buttonSetNewValue(e.target.value, \"boxShadowColor\")\n                  }\n                  value={button.boxShadowColor}\n                  type=\"color\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          className={`tab tab-background ${\n            tab === \"tab-background\" ? \"active\" : \"\"\n          }`}\n        >\n          <div className=\"tab-name\" onClick={() => setTab(\"tab-background\")}>\n            Background:{\" \"}\n            <img\n              src=\"/images/arrow-down.png\"\n              alt=\"arrow-down\"\n              className=\"arrow-down\"\n            />\n          </div>\n          <div className=\"tab-content\">\n            <div className=\"input-group button-background\">\n              <label htmlFor=\"backgroundColor\">Background Color:</label>\n              <input\n                id=\"backgroundColor\"\n                onChange={e => buttonSetNewValue(e.target.value, \"background\")}\n                defaultValue={button.background}\n                type=\"color\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"output\">\n        <ButtonPreview button={button} />\n        <HTMLOutput innerText={button.text} />\n        <CSSOutput />\n      </div>\n    </div>\n  );\n};\n\n/* FEATURES TO IMPLEMENT\n# Show CSS Output\n# Show tooltip that text was copied\n# Preloader\n# Logo Icon\n# Favicon\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}